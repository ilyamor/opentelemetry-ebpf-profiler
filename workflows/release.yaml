name: Release

on:
  push:
    tags:
      - 'v*'
      # Add any other branches you want to trigger the action on push


jobs:
  build-coralogix-ebpf-profiler-amd:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to jfrog
        uses: docker/login-action@v3
        with:
          registry: cgx.jfrog.io
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # NOTE: 'docker-container' driver is required for multi-platform support

      - name: Cache images
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy .git context
        run: |
          cp -r .git agent/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ECR_ROLE }}
          aws-region: ${{ vars.DEFAULT_ECR_REGISTRY_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Release ebpf-profiler
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: agent/
          file: agent/Dockerfile
          push: true
          tags: |
            cgx.jfrog.io/coralogix-docker-images/coralogix-ebpf-profiler:${{ env.version }}-amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true

  build-coralogix-ebpf-profiler-arm:
    runs-on: arm64-4-16
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to jfrog
        uses: docker/login-action@v3
        with:
          registry: cgx.jfrog.io
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # NOTE: 'docker-container' driver is required for multi-platform support

      - name: Cache images
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Copy .git context
        run: |
          cp -r .git agent/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ECR_ROLE }}
          aws-region: ${{ vars.DEFAULT_ECR_REGISTRY_REGION }}

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Release agent
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          context: agent/
          file: agent/Dockerfile
          push: true
          tags: |
            cgx.jfrog.io/coralogix-docker-images/coralogix-ebpf-profiler:${{ env.version }}-arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,new=true

  publish-coralogix-ebpf-profiler-manifests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    needs:
      - build-coralogix-ebpf-profiler-amd
      - build-coralogix-ebpf-profiler-arm

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to jfrog
        uses: docker/login-action@v3
        with:
          registry: cgx.jfrog.io
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # NOTE: 'docker-container' driver is required for multi-platform support


      - name: Create coralogix-ebpf-profiler Manifest
        run: |
          docker buildx create --use
          docker buildx imagetools create \
          --tag cgx.jfrog.io/coralogix-docker-images/coralogix-ebpf-profiler:${{ env.version }} \
          cgx.jfrog.io/coralogix-docker-images/coralogix-ebpf-profiler:${{ env.version }}-amd64 \
          cgx.jfrog.io/coralogix-docker-images/coralogix-ebpf-profiler:${{ env.version }}-arm64

  publish-helm:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    needs:
      - publish-coralogix-ebpf-profiler-manifests

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to jfrog
        uses: docker/login-action@v3
        with:
          registry: cgx.jfrog.io
          username: ${{ secrets.JFROG_USER }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2



      - name: Package chart
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency build ./public-chart
          helm package ./public-chart
          ls -l *.tgz

      - name: Upload chart to jfrog
        env:
          JFROG_USER: ${{ secrets.JFROG_USER }}
          JFROG_PASSWORD: ${{ secrets.JFROG_PASSWORD }}
          ARTIFACTORY_URL_BASE: "https://cgx.jfrog.io/artifactory/coralogix-charts"
        run: |
          CHART_FILE=$(ls *.tgz)  # Find the packaged Helm chart
          ARTIFACTORY_URL="${ARTIFACTORY_URL_BASE}/${CHART_FILE}"

          echo "Uploading Helm chart to $ARTIFACTORY_URL"
          response=$(curl -u "$JFROG_USER:$JFROG_PASSWORD" -T "$CHART_FILE" "$ARTIFACTORY_URL" -w "%{http_code}" -o /dev/null)
          if [ "$response" -ne 201 ]; then
            echo "Upload failed with status $response"
            exit 1
          fi

  
  
  

  
  
  
  

